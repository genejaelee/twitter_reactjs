<%= render 'layouts/header' %>
  
  <div id="loadingContainer">
    <%= image_tag("loading.gif", :alt => "Loading", :id => "loading", :class => "loading-hide") %>
  </div>
  <!-- render tweets here -->
  <div id="content">
  </div>
  
  <script type="text/jsx">
    console.log('loading script');
    
    hideLoadingAni = function(){
      document.getElementById('loading').className = "loading-hide";
    }
    
    showLoadingAni = function(){
      document.getElementById('loading').className = "loading-show";
    }
    
    var UserSearch = React.createClass({
      getInitialState: function() {
        return {
          value: 'bhorowitz',
          data: {}
        };
      },
      
      handleChange: function(e) {
        this.setState({
          value: e.target.value
        });
      },
      
      handleEnter: function(e) {
        if (e.which == 13) {
          var username = e.target.value;
          var json = {'username': username};
          var url = this.props.url;
          var _this = this;
          getUsers(url, json, function(results){
            _this.setState({
              data: results
            });
          });
        }
      },
      
      render: function(){
        var value = this.state.value;
        var data = this.state.data;
        return(
          <div>
            <div className="searchContainer">
              <input 
                className="userSearch"
                value={value}
                onKeyDown={this.handleEnter}
                onChange={this.handleChange}
              />
            </div>
            <TweetsContainer data={data} />
          </div>
        );
      }
    });
    
    var TweetsList = React.createClass({
      render: function(){
        var tweetNodes = this.props.data.map(function (tweet){
          var has_reply = false
          if (tweet.in_reply_to_status_id) has_reply = true;
          return (
            <Tweet 
              key={tweet.id}
              tweet={tweet}
              has_reply={has_reply}
            />
          );
        });
        return (
          <div className="tweetsList">
            {tweetNodes}
          </div>
        );
      }
    });
    
    var Tweet = React.createClass({
      getInitialState: function() {
        return {
          parents: []
        };
      },
      
      handleClick: function(e) {
        var parent_tweet_id = this.props.tweet.in_reply_to_status_id_str;
        var url = "api/get_parents"
        var _this = this;
        if (parent_tweet_id) {
          getParents(url, parent_tweet_id, function(results){
            _this.setState({parents: results.tweets})
          });
        }
      },
      
      render: function(){
        var tweet = this.props.tweet
        var user = tweet.user
        var date = tweet.created_at
        var formatted_date = new Date(Date.parse(date)).toLocaleString()
        var reply_id = tweet.in_reply_to_status_id;
        var parents = this.state.parents
        var has_reply = this.props.has_reply;
        setClass = function(parents){
          if (has_reply) { return (" active tweet") }
          else { return (" tweet") };
        }
        var thisClass = setClass(parents);
        return (
          <div className={thisClass} onClick={this.handleClick}>
            <div className="tweetHeader">
              <div className="headerElement headerAuthor">{user.name}</div>
              <div className="headerElement headerDate">{formatted_date}</div>
            </div>
            <div className="tweetBody">{tweet.text}</div>
            <TweetParentsList replies={this.state.parents} />
          </div>
        );
      }
    });
    
    var TweetParentsList = React.createClass({
      render: function(){
        var parents = this.props.replies
        if (parents.length > 0) {
          var tweetParentsNodes = parents.map(function (parent){
            return (
              <TweetParent
                key={parent.id}
                tweet={parent}
              />
            )
          });
          return (
            <div className="tweetParents">
              {tweetParentsNodes}
            </div>
          );
        } else {
          return (
            <div className="noParents"></div>
          )
        }
      }
    });
    
    var TweetParent = React.createClass({
      render: function(){
        var tweet = this.props.tweet
        var user = tweet.user
        var date = tweet.created_at
        var formatted_date = new Date(Date.parse(date)).toLocaleString()
        return(
          <div className="tweetParent">
            <div className="tweetHeader">
              <div className="headerElement headerAuthor">{user.name}</div>
              <div className="headerElement headerDate">{formatted_date}</div>
            </div>
            <div className="tweetBody">{tweet.text}</div>
          </div>
        )
      }
    });
    
    var TweetsContainer = React.createClass({
      render: function(){
        var results = this.props.data;
        if (results.length > 0) {
          return (
            <div className="tweetsContainer">
              <TweetsList data={results} />
            </div>
          );
        } else {
          return (
            <div></div>
          )
        }
      }
    });
    React.render(
      <UserSearch url="/api/get_user" />,
      document.getElementById('content')
    )
    
    // HTTP request functions
    function getUsers(url, json, callback){
      showLoadingAni();
      $.ajax({
        url: url,
        dataType: 'json',
        type: 'POST',
        data: json,
        success: function(data){
          callback(data);
          hideLoadingAni();
        }
      });
    }

    function getParents(url, id, callback) {
      showLoadingAni();
      $.ajax({
        url: url,
        dataType: 'json',
        type: 'POST',
        data: { 
          'parent_tweet_id' : id,
        },
        success: function(data){
          hideLoadingAni();
          callback(data);
        }.bind(this),
          error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    }
    
  </script>
