<%= render 'layouts/header' %>


  <!-- render tweets here -->
  <div id="content">
  </div>
  
  <script type="text/jsx">
    /** @jsx React.DOM */
    console.log('loading script');
    
    var UserSearch = React.createClass({
      getInitialState: function() {
        return {
          value: 'genejaelee',
          data: {}
        };
      },
      
      handleChange: function(e) {
        this.setState({
          value: e.target.value
        });
      },
      
      handleEnter: function(e) {
        if (e.which == 13) {
          var username = e.target.value;
          var url = this.props.url;
          $.ajax({
            url: url,
            dataType: 'json',
            type: 'POST',
            data: { 'username' : username },
            success: function(data){
              console.log('success ' + JSON.stringify(data) + ' and length is ' + data.length);
              this.setState({data: data});
            }.bind(this),
              error: function(xhr, status, err) {
              console.error(this.props.url, status, err.toString());
            }.bind(this)
          });
        }
      },
      
      render: function(){
        var value = this.state.value;
        var data = this.state.data;
        return(
          <div>
            <div className="searchContainer">
              <input 
                className="userSearch"
                value={value}
                onKeyDown={this.handleEnter}
                onChange={this.handleChange}
              />
            </div>
            <TweetsContainer data={data} />
          </div>
        );
      }
    });
    
    var TweetsList = React.createClass({
      render: function(){
        var tweetNodes = this.props.data.map(function (tweet){
          return (
            <Tweet 
              key={tweet.id}
              tweet={tweet}
            />
          );
        });
        return (
          <div className="tweetsList">
            {tweetNodes}
          </div>
        );
      }
    });
    
    var Tweet = React.createClass({
      getInitialState: function() {
        return {
          parents: []
        };
      },
      
      handleClick: function(e) {
        var parent_tweet_id = this.props.tweet.in_reply_to_status_id_str;
        var url = "api/get_parents"
        if (parent_tweet_id) {
          $.ajax({
            url: url,
            dataType: 'json',
            type: 'POST',
            data: { 
              'parent_tweet_id' : parent_tweet_id,
            },
            success: function(data){
              console.log('success getting parent tweets ' + data.tweets);
              this.setState({parents: data.tweets});
            }.bind(this),
              error: function(xhr, status, err) {
              console.error(this.props.url, status, err.toString());
            }.bind(this)
          });
        }
      },
      
      render: function(){
        var tweet = this.props.tweet
        var user = tweet.user
        var date = tweet.created_at
        var formatted_date = new Date(Date.parse(date)).toLocaleString()
        var reply_id = tweet.in_reply_to_status_id;
        return (
          <div className="tweet" onClick={this.handleClick}>
            <div className="tweetHeader">
              <div className="headerElement headerAuthor">{user.name}</div>
              <div className="headerElement headerDate">{formatted_date}</div>
            </div>
            <div className="tweetBody">{tweet.text}</div>
            <TweetParentsList replies={this.state.parents} />
          </div>
        );
      }
    });
    
    var TweetParentsList = React.createClass({
      render: function(){
        var parents = this.props.replies
        console.log('parents');
        console.log(parents);
        if (parents.length > 0) {
          var tweetParentsNodes = parents.map(function (parent){
            return (
              <TweetParent
                key={parent.id}
                tweet={parent}
              />
            )
          });
          return (
            <div className="tweetParents">
              {tweetParentsNodes}
            </div>
          );
        } else {
          console.log('still no parents');
          return (
            <div className="noParents"></div>
          )
        }
      }
    });
    
    var TweetParent = React.createClass({
      render: function(){
        var tweet = this.props.tweet
        var user = tweet.user
        var date = tweet.created_at
        var formatted_date = new Date(Date.parse(date)).toLocaleString()
        return(
          <div className="tweetParent">
            <div className="tweetHeader">
              <div className="headerElement headerAuthor">{user.name}</div>
              <div className="headerElement headerDate">{formatted_date}</div>
            </div>
            <div className="tweetBody">{tweet.text}</div>
          </div>
        )
      }
    });
    
    var TweetsContainer = React.createClass({
      render: function(){
        var results = this.props.data;
        if (results.length > 0) {
          return (
            <div className="tweetsContainer">
              <TweetsList data={results} />
            </div>
          );
        } else {
          return (
            <div></div>
          )
        }
      }
    });
    
    React.render(
      <UserSearch url="/api/get_user" />,
      document.getElementById('content')
    )
    
  </script>
